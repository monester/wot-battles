# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-10 08:03
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('wgdb', '0001_initial'),
    ]

    operations = (
        migrations.RunSQL(
            "CREATE TYPE province_status AS ENUM ('FINISHED', 'STARTED', 'UNKNOWN')",
            "DROP TYPE province_status",
        ),
        migrations.RunSQL(
            "ALTER TABLE wgdb_province ALTER COLUMN status TYPE province_status USING status::province_status",
            "ALTER TABLE wgdb_province ALTER COLUMN status TYPE VARCHAR(20)",
        ),
        migrations.RunSQL(
            "ALTER TABLE wgdb_provincestat ALTER COLUMN status TYPE province_status USING status::province_status",
            "ALTER TABLE wgdb_provincestat ALTER COLUMN status TYPE VARCHAR(20)",
        ),
        migrations.RunSQL(
            "CREATE TYPE province_landing_type AS ENUM ('tournament', 'auction', 'unknown')",
            "DROP TYPE province_landing_type",
        ),
        migrations.RunSQL(
            "ALTER TABLE wgdb_province ALTER COLUMN landing_type TYPE province_landing_type USING landing_type::province_landing_type",
            "ALTER TABLE wgdb_province ALTER COLUMN landing_type TYPE VARCHAR(20)",
        ),
        migrations.RunSQL(
            "ALTER TABLE wgdb_provincestat ALTER COLUMN landing_type TYPE province_landing_type USING landing_type::province_landing_type",
            "ALTER TABLE wgdb_provincestat ALTER COLUMN landing_type TYPE VARCHAR(20)",
        ),
        migrations.RunSQL(
            "CREATE unique index on wgdb_provincestat (province_id, battles_start_at) ;",
            "DROP INDEX wgdb_provincestat_province_id_battles_start_at_idx"
        ),
        # if (current_time >= NEW.battles_start_at and NEW.status != 'STARTED') then
        #     target_date := target_date + interval '1 day';
        # end if;
        migrations.RunSQL(
            """
CREATE OR REPLACE FUNCTION update_prov_stat() RETURNS trigger LANGUAGE plpgsql AS $_$
DECLARE
    target_date             date;
BEGIN
    INSERT INTO wgdb_provincestat(
        battles_start_at,
        current_min_bet,
        daily_revenue,
        is_borders_disabled,
        landing_type,
        last_won_bet,
        max_bets,
        arena_id,
        pillage_end_at,
        front_id,
        prime_time,
        owner_clan_id,
        province_id,
        province_name,
        revenue_level,
        round_number,
        server,
        status,
        uri,
        world_redivision
    ) VALUES (
        NEW.battles_start_at,
        NEW.current_min_bet,
        NEW.daily_revenue,
        NEW.is_borders_disabled,
        NEW.landing_type,
        NEW.last_won_bet,
        NEW.max_bets,
        NEW.arena_id,
        NEW.pillage_end_at,
        NEW.front_id,
        NEW.prime_time,
        NEW.owner_clan_id,
        NEW.province_id,
        NEW.province_name,
        NEW.revenue_level,
        NEW.round_number,
        NEW.server,
        NEW.status,
        NEW.uri,
        NEW.world_redivision
    ) ON CONFLICT (province_id, battles_start_at) DO UPDATE SET (
        battles_start_at,
        current_min_bet,
        daily_revenue,
        is_borders_disabled,
        landing_type,
        last_won_bet,
        max_bets,
        arena_id,
        pillage_end_at,
        front_id,
        prime_time,
        owner_clan_id,
        province_id,
        province_name,
        revenue_level,
        round_number,
        server,
        status,
        uri,
        world_redivision
    ) = (
        NEW.battles_start_at,
        NEW.current_min_bet,
        NEW.daily_revenue,
        NEW.is_borders_disabled,
        NEW.landing_type,
        NEW.last_won_bet,
        NEW.max_bets,
        NEW.arena_id,
        NEW.pillage_end_at,
        NEW.front_id,
        NEW.prime_time,
        NEW.owner_clan_id,
        NEW.province_id,
        NEW.province_name,
        NEW.revenue_level,
        NEW.round_number,
        NEW.server,
        NEW.status,
        NEW.uri,
        NEW.world_redivision
    );
    RETURN NEW;
END
$_$;
""", "DROP FUNCTION update_prov_stat()"
        ),
        migrations.RunSQL(
            """
CREATE OR REPLACE FUNCTION create_owner_clan() RETURNS trigger LANGUAGE plpgsql AS $_$
BEGIN
    if (NEW.owner_clan_id IS NOT NULL ) then
        INSERT INTO wgdb_clan(clan_id) VALUES(NEW.owner_clan_id) ON CONFLICT(clan_id) DO NOTHING;
    end if;
    RETURN NEW;
END
$_$
            """, "DROP FUNCTION create_owner_clan()"
        ),
        migrations.RunSQL(
            "CREATE TRIGGER update_prov_stat AFTER INSERT OR UPDATE ON wgdb_province "
            "FOR EACH ROW EXECUTE PROCEDURE update_prov_stat()",
            "DROP TRIGGER update_prov_stat ON wgdb_province",
        ),
        migrations.RunSQL(
            "CREATE TRIGGER create_owner_clan BEFORE INSERT OR UPDATE ON wgdb_province "
            "FOR EACH ROW EXECUTE PROCEDURE create_owner_clan()",
            "DROP TRIGGER create_owner_clan ON wgdb_province",
        )
    )
